#!/bin/sh
#
# This file is in the public domain. It is intended to be a helper for shql.
# If you wish to use this with other databases you will need to modify the
# last section in the AWK code bellow. Specifically remove the doubling of
# the backslash character "\".
#
# For more information email LoranceStinson AT gmail DOT com.
# Or see http://lorance.freeshell.org/shql/

#**************************************************************************
# Defaults.
#**************************************************************************
CSV_SEP=","
CSV_QUOTE='"'
CSV_ESCAPE='"'
TABLE_NAME="table"
SKIP_ROWS="0"
FILE="-"
FILTER="cat"
NL_TEXT="\\\\n"
TAB_TEXT="\\\\t"
NUM_COLS=""

#**************************************************************************
# usage() - Display the command line help text.
#**************************************************************************
usage(){
    if [ "$1" ] ; then
        echo "$1"
        echo ""
    fi
    cat<<EOHELP
Usage:  `basename $0` [options] <file>
Converts a CSV file to an shql SQL file. Proper insert statements are
generated. Input can be a CSV file or standard input.
Options:
    -c          Create the table based on the first row. This implies -r 1.
    -d <db>     Insert the data into the database instead of ouputing the SQL.
                shql must be in the path and db must exist.
    -e <escape> The CSV escape character. Defaults to '"'.
    -h          This text.
    -N <text>   Replace embeded newlines with text. Defaults to "\\n".
    -n <number> Output exactly number of columns. If a row has more columns the
                extra will be removed and if fewer blank columns will be added
                When -c is used this will default to the number of columns on
                the first row.
    -q <quote>  the CSV quote character. Defaults to '"'.
    -r <num>    Skip num rows of the CSV file or input.
    -s <sep>    The CSV field separator. Defaults to ",".
    -T <text>   Replaces tabs with text. Defaults to "\\t"
    -t <table>  Table name for insert and create. Defaults to "table".
EOHELP
    exit 1
}

#**************************************************************************
# Check and handle commandline options.
#**************************************************************************
while [ "$#" -gt 0 ] ; do
    case "$1" in
        # Create a database.
        -c) CREATETABLE="Y"; shift;;
        # Database name.
        -d) [ "$2" ] && FILTER="shql $2" || usage "$1 requires an argument."
            shift 2;;
        # CSV escape character.
        -e) [ "$2" ] && CSV_ESCAPE="$2"  || usage "$1 requires an argument."
            shift 2;;
        # Print the help text.
        -h) usage;;
        # Newline replacement text.
        -N) [ "$2" ] && NL_TEXT="$2"     || usage "$1 requires an argument."
            shift 2;;
        # The number of columns to output.
        -n) [ "$2" ] && NUM_COLS="$2"    || usage "$1 requires an argument."
            shift 2;;
        # CSV quote character.
        -q) [ "$2" ] && CSV_QUOTE="$2"   || usage "$1 requires an argument."
            shift 2;;
        # Rows to skip
        -r) [ "$2" ] && SKIP_ROWS="$2"   || usage "$1 requires an argument."
            shift 2;;
        # CSV separator character.
        -s) [ "$2" ] && CSV_SEP="$2"     || usage "$1 requires an argument."
            shift 2;;
        # Tab replacement text.
        -T) [ "$2" ] && TAB_TEXT="$2"    || usage "$1 requires an argument."
            shift 2;;
        # Table name.
        -t) [ "$2" ] && TABLE_NAME="$2"  || usage "$1 requires an argument."
            shift 2;;
        # Strangely named files.
        --) [ "$2" ] && FILE="$2"; break;;
        # Read from STDIN.
        -)  FILE="-"; shift;;
        # Catch invalid options.
        -*) usage "Invalid option $1";;
        # Anything else should be a file.
        *)  FILE="$1"; shift;;
    esac
done

# Check the file.
[ "X$FILE" != "X-" -a ! -f "$FILE" -a ! -r "$FILE" ] &&
    usage "Unable to read the file ($FILE)."

#**************************************************************************
# Perform the actual conversion.
# The heart is the function parse_csv I wrote for this purpose.
# See http://lorance.freeshell.org/csv/ for more information.
#**************************************************************************
awk -v csvsep="$CSV_SEP" \
    -v csvquote="$CSV_QUOTE" \
    -v csvescape="$CSV_ESCAPE" \
    -v table="$TABLE_NAME" \
    -v create="$CREATETABLE" \
    -v skip="$SKIP_ROWS" \
    -v nltext="$NL_TEXT" \
    -v tabtext="$TAB_TEXT" \
    -v numcols="$NUM_COLS" \
'function parse_csv(string,csv,sep,quote,escape,newline,fields,instr,pos,strtrim) {
    # Make sure there is something to parse.
    if (length(string) == 0) return 0;
    string = sep string; # The code bellow always assumes ,FIELD.
    fields = 0; # The number of fields found thus far.
    while (length(string) > 0) {
        strtrim = 0; # Used to trim quotes off strings.
        # Handle a quoted field.
        if (substr(string,2,1) == quote) {
            instr = 1; pos = 2; strtrim = 1;
            do {
                pos++
                if (pos != length(string) &&
                    substr(string,pos,1) == escape &&
                    (substr(string,pos + 1,1) == quote ||
                     substr(string,pos + 1,1) == escape)) {
                    # Remove escaped quote characters.
                    string = substr(string,1,pos - 1) substr(string,pos + 1);
                } else if (substr(string,pos,1) == quote) {
                    # Found the end of the string.
                    instr = 0;
                } else if (newline && pos == length(string)) {
                    # Handle embedded newlines if requested.
                    if (getline == -1) {
                        csverr = "Unable to read the next line.";
                        return -1;
                    }
                    string = string newline $0;
                }
            } while (pos < length(string) && instr)
            if (instr) {
                csverr = "Missing end quote.";
                return -1;
            }
        } else {
            # Handle an empty field.
            if (length(string) == 1 || substr(string,2,1) == sep) {
                csv[fields] = "";
                fields++;
                if (length(string) == 1)
                    return fields;
                string = substr(string,2);
                continue;
            }
            # Search for a separator.
            pos = index(substr(string,2),sep);
            # If there is no separator the rest of the string is a field.
            if (pos == 0) {
                csv[fields] = substr(string,2);
                fields++;
                return fields;
            }
        }
        if ((pos != length(string) && substr(string,pos + 1,1) != sep)) {
            csverr = "Missing separator.";
            return -1;
        }
        # Gather the field.
        csv[fields] = substr(string,2 + strtrim,pos - (1 + strtrim * 2));
        fields++;
        # Remove the field from the string for the next pass.
        string = substr(string,pos + 1);
    }
    return fields; }

{   line++ # The current line number
    # Parse the line.
    fields = parse_csv($0,csv,csvsep,csvquote,csvescape,nltext);
    # Check for errors.
    if (fields < 0 ) {
        print "ERROR: " csverr " at line # "line | "cat 1>&2";
        next;
    }
    # Output the SQL to make the table it requested.
    if (create == "Y" && line == 1) {
        printf "create table %s (\n", table
        for (col = 0; col < fields; col++) {
            gsub(/ /,"_",csv[col]);
            printf "	%s	char(%s)", csv[col], length(csv[col]);
            if (col < fields - 1) printf ",";
            printf "\n";
        }
        printf ");\n"
        if (!numcols) numcols = fields;
        next;
    }
    # Skip rows if requested.
    if (line <= skip) next;
    # Make sure the right number of columns are output.
    if (numcols){
        if (fields < numcols) {
            # Blank out the extra fields.
            for (col = fields; col < numcols; col++)
                csv[col] = ""
        }
        fields = numcols;
    }
    # Build the insert statement.
    printf "insert into %s values (", table
    for (col = 0; col < fields; col++) {
        gsub(/\t/,tabtext,csv[col]); # Keep tabs out.
        if ((pos = match(csv[col],"[\"`\\\\$]"))) {
            # Quote special characters.
            string = "";
            check = csv[col];
            do {
               quote = "\\\\"
               if (substr(check, pos, 1) == "\\") quote = "\\"
               string = string substr(check, 1, pos - 1) quote substr(check, pos, 1);
               check = substr(check, pos + 1);
            } while ((pos = match(check,"[\"`\\\\$]")))
            string = string check;
            if (string ~ /\\$/)
                string = string "\\\\"
        } else
           string = csv[col];
        printf "\"%s\"", string;
        if (col < fields - 1) printf ",";
    }
    printf ");\n"}' $FILE | eval "$FILTER"
