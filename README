                              S H Q L  version 2b1

        Shql is a program that reads SQL commands interactively and
        executes those commands by creating and manipulating Unix files.

        This program requires a bourne shell that understands functions,
        as well as awk, grep, cut, sort, uniq, join, wc, and sed.

        This script can be invoked with the command 

                shql [-q] {database name}

        A directory must be created for the database before you may use it.
        This directory will house all data files for a single database.  All
        datafiles are created with mode 666 ('rw-rw-rw-'), so create the
        directory with 777 ('rwxrwxrwx') if you want the database to be
        sharable, and 700 ('rwx------') to be private.  Of course, multiple
        databases are possible.  Databases are searched for in the directories
        specified by the variable $SHQL_PATH in the shql script. This variable
        is in bash-like path form. For example if $SHQL_PATH equals
        "~/shql:/var/shql" then the database mydb could be in ~/shql/mydb or
        /var/shql/mydb.  The -q option turns off the display of headings so the
        output of shql can be used by other programs by capturing all lines
        that begin the pipe symbol.

        The program is patterned after Ingres's interactive sql terminal
        monitor program.  Terminal monitor commands begin with a forward slash.
        Forward slashes may appear at the end of a command line.  The /g is the
        'go' command, /p is print, and /q is quit.  A semicolon ";" will also
        act as a 'go' command.  Try 'help commands;' or /?  for a full list.
        Because of this, if you need a slash as the second to last caracter on
        a line, you should add a space between the slash and the last
        character.

        To get started, invoke shql with a database name.  Use the directory 
        name you created above. Type

                shql mydb

        if the directory you created was 'mydb'.  Once shql starts up, you
        should see the database name displayed, and then the prompt 'NAME> ' At
        this point, the most valuable thing is to type help,

                mydb> help;

        You may then go on.  The command 'help syntax;' displays syntax
        for all SQL operations, and 'help commands;' displays all shql
        workspace commands.  Try the demo.

        Shql can execute only one operation at a time, but operations can
        be spread over several lines.

        Shql operations are allow 'select' operations on multiple tables.
        Table names are read from left to write in select's 'from'
        section, so the tables should be ordered with the most central
        tables first.  In two-table joins, it doesn't matter.  In three
        table joins, if you join table A-to-B and B-to-C, B must not be
        the last table in the from clause, because shql will not be able
        to join tables A-C.  If you get the message 'Join not found, try
        reordering tables', this is probably the problem.  Also
        qualified field names are not understood, like tablename.fieldname,
        so if you are joining my_id in table A with my_id in table B, just
        say 'my_id = my_id'.  Views can also be used to create
        multi-table selects.

        Subselects are implemented, but must be the last operand of a
        'where' clause, most useful with 'in'.

        In most cases, commas are optional.  NULLs are not implemented.
        Aggregates like AVG() are implemented, but not with GROUP BY. If * is
        used in an aggregate it is internally replaced with the first column of
        the table. Thus count(*) works as expected.

        This SQL is type-less but does require column type when creating tables
        and adding columns.  This is used only for display purposes.  Shql is
        case-sensitive, and expects SQL key words to be in lower case.

        Commands can be piped into shql.  The table data files are tab
        delimited, so awk scripts can be used to generate reports directly from
        the tables.  To operate on non-shql data files, create a dummy table
        with the proper fields, then copy your file into your shql data
        directory, replacing your delimiters with tabs, then run shql on the
        table, and convert the table back to its original format.  Grave
        accents "`" may be used to execute unix command from with shql, but
        they must be enclosed in double quotes.  Environment variables may also
        be used, also in double quotes. See the demo for an example, i.e. "cat
        demo.shql | shql mydb".

        The included script test.sh and it's support files test.sql and
        test.out test shql to make sure it is working correctly. Please run
        test.sh before using shql.

        If you have comments, suggestions, or bug reports contact:

                Lorance Stinson <LoranceStinson AT gmail DOT com>

        The original author of shql is:

                Bruce Momjian, root AT candle DOT pha DOT pa DOT us

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 2.6.1

mQBtAy6pceUAAAEDAM9YKKJiqG7AzjLIyvqmDHvjVnmCG0QlhNZm3EdpcbIZBEUJ
41zWuGhvusiC99MeXy43kxSF4pJLFWhLDYRk1unVvz5y3B+xyERhig3h/AWWRaxH
J4HzFdeKgclqllqhVQAFEbQlQnJ1Y2UgTW9tamlhbiA8cm9vdEBjYW5kbGUucGhh
LnBhLnVzPg==
=S8mw
-----END PGP PUBLIC KEY BLOCK-----

        I asked Mr. Momjian about the copyright since there is none stated in
        the source, readme files or UseNET posts I could find. His reply was:

        It is public domain, meaning anything can be done with it, though I
        would like my name to remain associated with the code in some way.

Known Problems:

1. does not work with dash
2. problems with sort 8.21? test fails complaining of +0 argument. needs investigation.
